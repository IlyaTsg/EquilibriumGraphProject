# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import graph
import numpy as np
from scipy.linalg import solve


class Ui_MainWindow(object):
    
    NewGraph = graph.Graph()
    InfoIsReady = False
    BalanceIsReady = False
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(819, 616)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.EditFunc = QtWidgets.QTextEdit(self.centralwidget)
        self.EditFunc.setGeometry(QtCore.QRect(100, 310, 361, 181))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.EditFunc.setFont(font)
        self.EditFunc.setObjectName("EditFunc")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 270, 441, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.EntryOrder = QtWidgets.QLabel(self.centralwidget)
        self.EntryOrder.setGeometry(QtCore.QRect(20, 310, 81, 241))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.EntryOrder.setFont(font)
        self.EntryOrder.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.EntryOrder.setText("")
        self.EntryOrder.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.EntryOrder.setObjectName("EntryOrder")
        self.ShowGraph = QtWidgets.QPushButton(self.centralwidget)
        self.ShowGraph.setGeometry(QtCore.QRect(20, 20, 251, 41))
        self.ShowGraph.setObjectName("ShowGraph")
        self.DoBalance = QtWidgets.QPushButton(self.centralwidget)
        self.DoBalance.setGeometry(QtCore.QRect(20, 80, 251, 41))
        self.DoBalance.setObjectName("DoBalance")
        self.ShowBadRoad = QtWidgets.QPushButton(self.centralwidget)
        self.ShowBadRoad.setGeometry(QtCore.QRect(20, 140, 251, 41))
        self.ShowBadRoad.setObjectName("ShowBadRoad")
        self.FuncReady = QtWidgets.QPushButton(self.centralwidget)
        self.FuncReady.setGeometry(QtCore.QRect(350, 510, 141, 41))
        self.FuncReady.setObjectName("FuncReady")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(510, 310, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(510, 360, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.StartVertex = QtWidgets.QLineEdit(self.centralwidget)
        self.StartVertex.setGeometry(QtCore.QRect(580, 310, 113, 22))
        self.StartVertex.setObjectName("StartVertex")
        self.FinishVertex = QtWidgets.QLineEdit(self.centralwidget)
        self.FinishVertex.setGeometry(QtCore.QRect(580, 360, 113, 22))
        self.FinishVertex.setObjectName("FinishVertex")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(510, 410, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.FinishVertex_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.FinishVertex_2.setGeometry(QtCore.QRect(580, 410, 113, 22))
        self.FinishVertex_2.setObjectName("FinishVertex_2")
        self.ResultWindow = QtWidgets.QScrollArea(self.centralwidget)
        self.ResultWindow.setGeometry(QtCore.QRect(320, 20, 451, 231))
        self.ResultWindow.setWidgetResizable(True)
        self.ResultWindow.setObjectName("ResultWindow")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 449, 229))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.ResultWindow.setWidget(self.scrollAreaWidgetContents)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 819, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.AddFunction()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "BalanceGraph"))
        self.EditFunc.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Segoe UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label.setText(_translate("MainWindow", "Ввод функций рёбер"))
        self.ShowGraph.setText(_translate("MainWindow", "Показать граф"))
        self.DoBalance.setText(_translate("MainWindow", "Рассчитать равновесное распределение"))
        self.ShowBadRoad.setText(_translate("MainWindow", "Показать неэффективную дорогу"))
        self.FuncReady.setText(_translate("MainWindow", "Ввести"))
        self.label_2.setText(_translate("MainWindow", "Исток:"))
        self.label_3.setText(_translate("MainWindow", "Сток:"))
        self.label_4.setText(_translate("MainWindow", "Поток:"))

    def AddFunction(self):
        self.ShowGraph.clicked.connect(lambda: self.DrawGraph())
        self.DoBalance.clicked.connect(lambda: self.ShowBalance())
        self.FuncReady.clicked.connect(lambda: self.PrepareExpressions())
        self.ShowBadRoad.clicked.connect(lambda: self.FindBadRoad())
        
        text = ""
        for i in range(self.NewGraph.EdgesCount):
            text += str(self.NewGraph.StartVertices[i]+1) + "->" + str(self.NewGraph.FinishVertices[i]+1) + "\n"
        self.EntryOrder.setText(text)
            
    def DrawGraph(self):
        self.NewGraph.ShowGraph()
        
    def PrepareExpressions(self):
        error = QtWidgets.QMessageBox()
        error.setWindowTitle("Ошибка")
        error.setText("Поля ввода не заполнены или заполнены неверно")
        error.setIcon(QtWidgets.QMessageBox.Warning)
        error.setStandardButtons(QtWidgets.QMessageBox.Ok)
        try:
            self.NewGraph.ResetGraph()
            self.BalanceIsReady = False
            self.InfoIsReady = False
            self.NewGraph.GetPuths(self.NewGraph.Matrix, int(self.StartVertex.text())-1, int(self.FinishVertex.text())-1, [])
            self.NewGraph.GetPuthMatrix()
            self.NewGraph.SetFlow(int(self.FinishVertex_2.text()))
            text = self.EditFunc.toPlainText()
            self.NewGraph.PrepareExpressionList(text)
            self.InfoIsReady = True
        except ValueError:
            error.exec_()
        except IndexError:
            error.exec_()

    def ShowBalance(self):
        text = ""
        
        if self.InfoIsReady: 
            AllBalances = self.NewGraph.FindBalance()
            
            # Вывод всех путей от S до F
            for i in range(len(self.NewGraph.Puths)):
                text += "Путь " + str(i+1) +": "
                for j in range(len(self.NewGraph.Puths[i])):
                    text += str(self.NewGraph.Puths[i][j]+1)
                    if j != len(self.NewGraph.Puths[i])-1:
                        text += "->"
                    else:
                        text += "\n"
                        
            if len(AllBalances) == 0:
                text += "Равнновесные распределения не найдены\n"
            else:
                self.BalanceIsReady = True
                text += "Равновесное распределение: \n"
                for i in range(len(self.NewGraph.Puths)):
                    text += "Путь " + str(i+1) +": "
                    for j in range(len(AllBalances)):
                        text += str(j+1) + ") "
                        text += str(round(AllBalances[j][i][0], 2))
                        text += " "
                    text += "\n" 
                
                text += "Время: " + str(round(self.NewGraph.BalanceTime[0], 2)) + "\n"     
        else:
            text += "Введите информацию о графе!\n"
            
        widget = QtWidgets.QLabel(text)
        self.ResultWindow.setWidget(widget)
        
    def FindBadRoad(self):
        text = ""
        if self.BalanceIsReady:
            if self.InfoIsReady: 
                res = self.NewGraph.FindUneffective()
                if len(res) != 0:
                    if len(res) > 1:
                        l = len(res)-1
                    else:
                        l = len(res)
                    for i in range(l):
                        text += "Неэффективная дорога: " + str(self.NewGraph.StartVertices[res[i][0]]+1) + " -> " + str(self.NewGraph.FinishVertices[res[i][0]]+1) + "\n"
                        text += "Время без данной дороги: " + str(round(res[i][1][0], 2)) + "\n"     
                    
                    if len(res) > 1:
                        text += "Время без всех неэффективных дорог: " + str(res[len(res)-1][0]) + "\n"   
                else:
                    text += "Неэффективные дороги не найдены \n"
            else:
                text += "Введите информацию о графе!\n"
        else:
            text += "Сначала найдите распределение!\n"
        
        widget = QtWidgets.QLabel(text)
        self.ResultWindow.setWidget(widget)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
